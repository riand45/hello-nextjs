{"ast":null,"code":"var _jsxFileName = \"/Users/riandpratamaputra/Frontend/hello-next/pages/index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Markdown from 'react-markdown';\nimport useSWR from 'swr';\nimport useRouter from 'next/router'; // const PostLink = props => (\n//     <li>\n//         <Link href=\"/p/[id]\" as={`/p/${props.id}`} >\n//             <a>{props.id}</a>\n//         </Link>\n//     </li>\n// )\n// const Index = props => (\n//     <Layout >\n//         <h1>Blog</h1>\n//         <div className=\"markdown\">\n//             <Markdown\n//                 source = {\n//                     `\n// This is our blog post. Yes. We can have a [About](/about). And we can have a title as well.\n// ### This is a title\n// And here's the content.\n//                     `\n//                 }\n//             />\n//         </div>\n//         <ul>\n//             {props.shows.map(show => (\n//                 <li key={show.id}>\n//                     <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//                         <a>{show.name}</a>\n//                     </Link>\n//                 </li>\n//             ))}\n//         </ul>\n//         <style jsx global>\n//         {`\n//             h1, a {\n//                 font-family: 'Arial';\n//                 font-size: 20px;\n//                 color: red;\n//             }\n//             ul {\n//                 padding: 0;\n//             }\n//             li {\n//                 list-style: none;\n//                 margin: 5px 0;\n//             }\n//             a {\n//                 text-decoration: none;\n//                 color: blue;\n//             }\n//             a:hover {\n//                 opacity: 0.6;\n//             }\n//         `}\n//         </style>\n//     </Layout>\n// )\n// Index.getInitialProps = async function(){\n//     const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//     const data = await res.json();\n//     // console.log(`Show data fetched. Count : ${data.length}`);\n//     return {\n//         shows: data.map(entry => entry.show)\n//     };\n// };\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function Index() {\n  const {\n    query\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`/api/randomQuote${query.author ? '?author=' + query.author : ''}`, fetcher);\n  const author = data === null || data === void 0 ? void 0 : data.author;\n  let quote = data === null || data === void 0 ? void 0 : data.quote;\n  if (!data) quote = 'Loading...';\n  if (error) quote = 'Failed to fetch the quote';\n  return __jsx(\"main\", {\n    className: \"jsx-3652350086\" + \" \" + \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-3652350086\" + \" \" + \"quote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, quote), author && __jsx(\"span\", {\n    className: \"jsx-3652350086\" + \" \" + \"author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 24\n    }\n  }, \" - \", author), __jsx(_JSXStyle, {\n    id: \"3652350086\",\n    __self: this\n  }, \"main.jsx-3652350086{width:90%;max-width:900px;margin:300px auto;text-align:center;}.quote.jsx-3652350086{font-family:cursive;color:#e243de;font-size:24px;padding-bottom:10px;}.author.jsx-3652350086{font-family:sans-serif;color:#559834;font-size:20px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yaWFuZHByYXRhbWFwdXRyYS9Gcm9udGVuZC9oZWxsby1uZXh0L3BhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHZ0IsQUFHK0IsQUFNVSxBQU1HLFVBWFAsVUFNRixHQU1BLEdBWEksUUFNSCxHQU1BLE9BWEcsS0FNRSxHQU1wQixVQVhBLE9BTUEiLCJmaWxlIjoiL1VzZXJzL3JpYW5kcHJhdGFtYXB1dHJhL0Zyb250ZW5kL2hlbGxvLW5leHQvcGFnZXMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9jb21wb25lbnRzL0hlYWRlcic7XG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvTGF5b3V0JztcbmltcG9ydCBmZXRjaCBmcm9tICdpc29tb3JwaGljLXVuZmV0Y2gnO1xuaW1wb3J0IE1hcmtkb3duIGZyb20gJ3JlYWN0LW1hcmtkb3duJztcbmltcG9ydCB1c2VTV1IgZnJvbSAnc3dyJztcbmltcG9ydCB1c2VSb3V0ZXIgZnJvbSAnbmV4dC9yb3V0ZXInXG5cbi8vIGNvbnN0IFBvc3RMaW5rID0gcHJvcHMgPT4gKFxuLy8gICAgIDxsaT5cbi8vICAgICAgICAgPExpbmsgaHJlZj1cIi9wL1tpZF1cIiBhcz17YC9wLyR7cHJvcHMuaWR9YH0gPlxuLy8gICAgICAgICAgICAgPGE+e3Byb3BzLmlkfTwvYT5cbi8vICAgICAgICAgPC9MaW5rPlxuLy8gICAgIDwvbGk+XG4vLyApXG5cbi8vIGNvbnN0IEluZGV4ID0gcHJvcHMgPT4gKFxuLy8gICAgIDxMYXlvdXQgPlxuLy8gICAgICAgICA8aDE+QmxvZzwvaDE+XG4vLyAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2Rvd25cIj5cbi8vICAgICAgICAgICAgIDxNYXJrZG93blxuLy8gICAgICAgICAgICAgICAgIHNvdXJjZSA9IHtcbi8vICAgICAgICAgICAgICAgICAgICAgYFxuLy8gVGhpcyBpcyBvdXIgYmxvZyBwb3N0LiBZZXMuIFdlIGNhbiBoYXZlIGEgW0Fib3V0XSgvYWJvdXQpLiBBbmQgd2UgY2FuIGhhdmUgYSB0aXRsZSBhcyB3ZWxsLlxuLy8gIyMjIFRoaXMgaXMgYSB0aXRsZVxuLy8gQW5kIGhlcmUncyB0aGUgY29udGVudC5cbi8vICAgICAgICAgICAgICAgICAgICAgYFxuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgIDwvZGl2PlxuLy8gICAgICAgICA8dWw+XG4vLyAgICAgICAgICAgICB7cHJvcHMuc2hvd3MubWFwKHNob3cgPT4gKFxuLy8gICAgICAgICAgICAgICAgIDxsaSBrZXk9e3Nob3cuaWR9PlxuLy8gICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3AvW2lkXVwiIGFzPXtgL3AvJHtzaG93LmlkfWB9PlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgPGE+e3Nob3cubmFtZX08L2E+XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbi8vICAgICAgICAgICAgICAgICA8L2xpPlxuLy8gICAgICAgICAgICAgKSl9XG4vLyAgICAgICAgIDwvdWw+XG4vLyAgICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPlxuLy8gICAgICAgICB7YFxuLy8gICAgICAgICAgICAgaDEsIGEge1xuLy8gICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnO1xuLy8gICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbi8vICAgICAgICAgICAgICAgICBjb2xvcjogcmVkO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgdWwge1xuLy8gICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBsaSB7XG4vLyAgICAgICAgICAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbi8vICAgICAgICAgICAgICAgICBtYXJnaW46IDVweCAwO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgYSB7XG4vLyAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuLy8gICAgICAgICAgICAgICAgIGNvbG9yOiBibHVlO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgYTpob3ZlciB7XG4vLyAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC42O1xuLy8gICAgICAgICAgICAgfVxuXG4vLyAgICAgICAgIGB9XG4vLyAgICAgICAgIDwvc3R5bGU+XG4vLyAgICAgPC9MYXlvdXQ+XG4vLyApXG5cbi8vIEluZGV4LmdldEluaXRpYWxQcm9wcyA9IGFzeW5jIGZ1bmN0aW9uKCl7XG4vLyAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLnR2bWF6ZS5jb20vc2VhcmNoL3Nob3dzP3E9YmF0bWFuJyk7XG4vLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbi8vICAgICAvLyBjb25zb2xlLmxvZyhgU2hvdyBkYXRhIGZldGNoZWQuIENvdW50IDogJHtkYXRhLmxlbmd0aH1gKTtcblxuLy8gICAgIHJldHVybiB7XG4vLyAgICAgICAgIHNob3dzOiBkYXRhLm1hcChlbnRyeSA9PiBlbnRyeS5zaG93KVxuLy8gICAgIH07XG4vLyB9O1xuXG5mdW5jdGlvbiBmZXRjaGVyKHVybCkge1xuICAgIHJldHVybiBmZXRjaCh1cmwpLnRoZW4ociA9PiByLmpzb24oKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluZGV4KCl7XG4gICAgY29uc3QgeyBxdWVyeSB9ID0gdXNlUm91dGVyKCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gdXNlU1dSKGAvYXBpL3JhbmRvbVF1b3RlJHtxdWVyeS5hdXRob3IgPyAnP2F1dGhvcj0nICsgcXVlcnkuYXV0aG9yIDogJyd9YCwgZmV0Y2hlcik7XG4gICAgXG4gICAgY29uc3QgYXV0aG9yID0gZGF0YT8uYXV0aG9yO1xuICAgIGxldCBxdW90ZSA9IGRhdGE/LnF1b3RlO1xuXG4gICAgaWYgKCFkYXRhKSBxdW90ZSA9ICdMb2FkaW5nLi4uJztcbiAgICBpZiAoZXJyb3IpIHF1b3RlID0gJ0ZhaWxlZCB0byBmZXRjaCB0aGUgcXVvdGUnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwiY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInF1b3RlXCI+e3F1b3RlfTwvZGl2PlxuICAgICAgICAgICAge2F1dGhvciAmJiA8c3BhbiBjbGFzc05hbWU9XCJhdXRob3JcIj4gLSB7IGF1dGhvciB9PC9zcGFuPn1cblxuICAgICAgICAgICAgPCBzdHlsZSBqc3ggPiB7XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICBtYWluIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDkwJTtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA5MDBweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAzMDBweCBhdXRvO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLnF1b3RlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IGN1cnNpdmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZTI0M2RlO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC5hdXRob3Ige1xuICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM1NTk4MzQ7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH0gPC9zdHlsZT5cbiAgICAgICAgPC9tYWluPlxuICAgIClcbn1cblxuLy8gZXhwb3J0IGRlZmF1bHQgSW5kZXg7Il19 */\\n/*@ sourceURL=/Users/riandpratamaputra/Frontend/hello-next/pages/index.js */\"));\n} // export default Index;","map":{"version":3,"sources":["/Users/riandpratamaputra/Frontend/hello-next/pages/index.js"],"names":["Link","Header","Layout","fetch","Markdown","useSWR","useRouter","fetcher","url","then","r","json","Index","query","data","error","author","quote"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAClB,SAAOL,KAAK,CAACK,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACH;;AAED,eAAe,SAASC,KAAT,GAAgB;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAYP,SAAS,EAA3B;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBV,MAAM,CAAE,mBAAkBQ,KAAK,CAACG,MAAN,GAAe,aAAaH,KAAK,CAACG,MAAlC,GAA2C,EAAG,EAAlE,EAAqET,OAArE,CAA9B;AAEA,QAAMS,MAAM,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,MAArB;AACA,MAAIC,KAAK,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,KAAlB;AAEA,MAAI,CAACH,IAAL,EAAWG,KAAK,GAAG,YAAR;AACX,MAAIF,KAAJ,EAAWE,KAAK,GAAG,2BAAR;AAEX,SACI;AAAA,wCAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA,wCAAe,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBA,KAAxB,CADJ,EAEKD,MAAM,IAAI;AAAA,wCAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA8BA,MAA9B,CAFf;AAAA;AAAA;AAAA,2zKADJ;AA4BH,C,CAED","sourcesContent":["import Link from 'next/link';\nimport Header from '../components/Header';\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Markdown from 'react-markdown';\nimport useSWR from 'swr';\nimport useRouter from 'next/router'\n\n// const PostLink = props => (\n//     <li>\n//         <Link href=\"/p/[id]\" as={`/p/${props.id}`} >\n//             <a>{props.id}</a>\n//         </Link>\n//     </li>\n// )\n\n// const Index = props => (\n//     <Layout >\n//         <h1>Blog</h1>\n//         <div className=\"markdown\">\n//             <Markdown\n//                 source = {\n//                     `\n// This is our blog post. Yes. We can have a [About](/about). And we can have a title as well.\n// ### This is a title\n// And here's the content.\n//                     `\n//                 }\n//             />\n//         </div>\n//         <ul>\n//             {props.shows.map(show => (\n//                 <li key={show.id}>\n//                     <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//                         <a>{show.name}</a>\n//                     </Link>\n//                 </li>\n//             ))}\n//         </ul>\n//         <style jsx global>\n//         {`\n//             h1, a {\n//                 font-family: 'Arial';\n//                 font-size: 20px;\n//                 color: red;\n//             }\n//             ul {\n//                 padding: 0;\n//             }\n//             li {\n//                 list-style: none;\n//                 margin: 5px 0;\n//             }\n//             a {\n//                 text-decoration: none;\n//                 color: blue;\n//             }\n//             a:hover {\n//                 opacity: 0.6;\n//             }\n\n//         `}\n//         </style>\n//     </Layout>\n// )\n\n// Index.getInitialProps = async function(){\n//     const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n//     const data = await res.json();\n\n//     // console.log(`Show data fetched. Count : ${data.length}`);\n\n//     return {\n//         shows: data.map(entry => entry.show)\n//     };\n// };\n\nfunction fetcher(url) {\n    return fetch(url).then(r => r.json());\n}\n\nexport default function Index(){\n    const { query } = useRouter();\n    const { data, error } = useSWR(`/api/randomQuote${query.author ? '?author=' + query.author : ''}`, fetcher);\n    \n    const author = data?.author;\n    let quote = data?.quote;\n\n    if (!data) quote = 'Loading...';\n    if (error) quote = 'Failed to fetch the quote';\n\n    return (\n        <main className=\"center\">\n            <div className=\"quote\">{quote}</div>\n            {author && <span className=\"author\"> - { author }</span>}\n\n            < style jsx > {\n                `\n                    main {\n                    width: 90%;\n                    max-width: 900px;\n                    margin: 300px auto;\n                    text-align: center;\n                    }\n                    .quote {\n                    font-family: cursive;\n                    color: #e243de;\n                    font-size: 24px;\n                    padding-bottom: 10px;\n                    }\n                    .author {\n                    font-family: sans-serif;\n                    color: #559834;\n                    font-size: 20px;\n                    }\n                `\n            } </style>\n        </main>\n    )\n}\n\n// export default Index;"]},"metadata":{},"sourceType":"module"}