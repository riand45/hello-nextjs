{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Markdown from 'react-markdown';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router'; // const PostLink = props => (\n//     <li>\n//         <Link href=\"/p/[id]\" as={`/p/${props.id}`} >\n//             <a>{props.id}</a>\n//         </Link>\n//     </li>\n// )\n\nvar Index = function Index(props) {\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"jsx-3768465992\"\n  }, \"Blog\"), __jsx(\"div\", {\n    className: \"jsx-3768465992\" + \" \" + \"markdown\"\n  }, __jsx(Markdown, {\n    source: \"\\nThis is our blog post. Yes. We can have a [About](/about). And we can have a title as well.\\n### This is a title\\nAnd here's the content.\\n                    \"\n  })), __jsx(\"ul\", {\n    className: \"jsx-3768465992\"\n  }, props.shows.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      className: \"jsx-3768465992\"\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id)\n    }, __jsx(\"a\", {\n      className: \"jsx-3768465992\"\n    }, show.name)));\n  })), __jsx(_JSXStyle, {\n    id: \"3768465992\"\n  }, [\"h1,a{font-family:'Arial';font-size:20px;color:red;}\", \"ul{padding:0;}\", \"li{list-style:none;margin:5px 0;}\", \"a{-webkit-text-decoration:none;text-decoration:none;color:blue;}\", \"a:hover{opacity:0.6;}\"]));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; // function fetcher(url) {\n//     return fetch(url).then(r => r.json());\n// }\n// export default function Index() {\n//     const { query } = useRouter();\n//     const { data, error } = useSWR(\n//         `/api/randomQuote${query.author ? '?author=' + query.author : ''}`, \n//         fetcher\n//     );\n//     const author = data?.author;\n//     let quote = data?.quote;\n//     if (!data) quote = 'Loading...';\n//     if (error) quote = 'Failed to fetch the quote';\n//     return (\n//         <main className=\"center\">\n//             <div className=\"quote\">{quote}</div>\n//             {author && <span className=\"author\"> - { author }</span>}\n//             < style jsx > {\n//                 `\n//                     main {\n//                     width: 90%;\n//                     max-width: 900px;\n//                     margin: 300px auto;\n//                     text-align: center;\n//                     }\n//                     .quote {\n//                     font-family: cursive;\n//                     color: #e243de;\n//                     font-size: 24px;\n//                     padding-bottom: 10px;\n//                     }\n//                     .author {\n//                     font-family: sans-serif;\n//                     color: #559834;\n//                     font-size: 20px;\n//                     }\n//                 `\n//             } </style>\n//         </main>\n//     )\n// }\n\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}